// class Solution {
//     public void merge(int[] nums1, int m, int[] nums2, int n) {
//         if(m+n == 1)
//         {
//             return (nums1.length == 0 ? nums2 : nums1);
//         }
//         int i=0, j=0, a=0;
//         int c = m+n;
//         int[] arr = new int[m+n];
//         while(c > 0){
//             if(nums1[i] < nums2[j]){
//                 arr[a] = nums1[i];
//                 i++;
//                 c--;
//                 a++;
//             }else if(nums2[j] < nums1[i]){
//                 arr[a] = nums2[j];
//                 j++;
//                 c--;
//                 a++;
//             }else{
//                 arr[a] = nums1[i];
//                 arr[a+1] = nums2[j];
//                 a++;
//                 i++;
//                 j++;
//                 c--; 
//             }
//         }
//         return arr;
//     }
// }

// class Solution {
//    public void merge(int[] nums1, int m, int[] nums2, int n) {
//         int p1 = m - 1;
//         int p2 = n - 1;
//         int pMerge = m + n - 1;
        
//         while (p2 >= 0) {
//             if (p1 >= 0 && nums1[p1] > nums2[p2]) {
//                 nums1[pMerge--] = nums1[p1--];
//             } else {
//                 nums1[pMerge--] = nums2[p2--];
//             }
//         }
//     }
// }

class Solution {
   public void merge(int[] nums1, int m, int[] nums2, int n) {
       int j=0;
       for(int i=m; i<nums1.length; i++){
           nums1[i] = nums2[j];
           j++;
       }
       Arrays.sort(nums1);
   }
}
