class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int[] arr = new int[nums.length];
        ArrayList<Integer> list1= new ArrayList<>();
        ArrayList<Integer> list2= new ArrayList<>();
        ArrayList<Integer> list3= new ArrayList<>();
        for(int i=0; i<nums.length; i++){
            if(nums[i] < pivot){
                list1.add(nums[i]);
            }else if(nums[i] == pivot){
                list2.add(nums[i]);
            }else{
                list3.add(nums[i]);
            }
        }
        list1.addAll(list2);
        list1.addAll(list3);
        for(int i=0; i<list1.size(); i++){
            arr[i] = list1.get(i);
        }
       
        return arr;
    }
}


/*********************************method-2**********************************/
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int[] ans=new int[nums.length];
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<pivot){
                ans[count]=nums[i];
                count++;
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]==pivot){
                ans[count]=nums[i];
                count++;
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]>pivot){
                ans[count]=nums[i];
                count++;
            }
        }
        return ans;
    }
}
