// class Solution {
//     public int minSubArrayLen(int target, int[] nums) {
//         Arrays.sort(nums);
//         int sum = 0;
//         int i = 0;
//         int j = nums.length-1;
//         int count = 1;
//         if(nums[0] == target){
//             return 1;
//         }else if(nums[nums.length-1] == target){
//             return 1;
//         }else if(nums.length == 0){
//             return 0;
//         }else{
//             while(i<j){
//                 sum = nums[i] + nums[j];
//                 if(sum == target){
//                     count ++;
//                     return count;
//                 }else if(sum < target){
//                     i++;
//                 }else if(sum > target){
//                     j--;
//                 }else{
//                     return 0;
//                 }
//             }
//         }
//         return 0;
//     }
// }

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int i=0;
        int j=0;
        int sum =0;
        int res =Integer.MAX_VALUE;
        while(j<nums.length)
        {
            sum=sum+nums[j];
            if(sum<target)
            {
                j++;
            }
            else if(sum==target)
            {
                res=Math.min(res,j-i+1);
                j++;
            }
            else if(sum>target)
            {
                while(sum>target)
                {
                    res=Math.min(res,j-i+1);
                    sum=sum-nums[i];
                    i++;
                }
                if(sum==target)
                {
                    res=Math.min(res,j-i+1);
                }
                j++;
            }
        }
        if(res==Integer.MAX_VALUE)
        {
            return 0;
        }
        return res;
        
    }
}
